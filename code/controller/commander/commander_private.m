function commander_private()

%% 状态转移标志
% TRANSITION_DENIED = int8(-1);
% TRANSITION_NOT_CHANGED = int8(0);
% TRANSITION_CHANGED = int8(1);

%% 加锁解锁原因
% ARM_DISARM_REASON_TRANSITION_TO_STANDBY = uint8(0);
% ARM_DISARM_REASON_RC_STICK = uint8(1);
% ARM_DISARM_REASON_RC_SWITCH = uint8(2);
% ARM_DISARM_REASON_COMMAND_INTERNAL = uint8(3);
% ARM_DISARM_REASON_COMMAND_EXTERNAL = uint8(4);
% ARM_DISARM_REASON_MISSION_START = uint8(5);
% ARM_DISARM_REASON_SAFETY_BUTTON = uint8(6);
% ARM_DISARM_REASON_AUTO_DISARM_LAND = uint8(7);
% ARM_DISARM_REASON_AUTO_DISARM_PREFLIGHT = uint8(8);
% ARM_DISARM_REASON_KILL_SWITCH = uint8(9);
% ARM_DISARM_REASON_LOCKDOWN = uint8(10);
% ARM_DISARM_REASON_FAILURE_DETECTOR = uint8(11);
% ARM_DISARM_REASON_SHUTDOWN = uint8(12);
% ARM_DISARM_REASON_UNIT_TEST = uint8(13);

%% 数据链丢失动作
LINK_LOSS_ACTIONS_DISABLED    = PARAM_DEFINE_CONST(uint8(0));
LINK_LOSS_ACTIONS_AUTO_LOITER = PARAM_DEFINE_CONST(uint8(1));	% Hold mode
LINK_LOSS_ACTIONS_AUTO_RTL    = PARAM_DEFINE_CONST(uint8(2));		% Return mode
LINK_LOSS_ACTIONS_AUTO_LAND   = PARAM_DEFINE_CONST(uint8(3));    % Land mode
LINK_LOSS_ACTIONS_TERMINATE   = PARAM_DEFINE_CONST(uint8(5));	% Terminate flight (set actuator outputs to failsafe values); and stop controllers)
LINK_LOSS_ACTIONS_LOCKDOWN    = PARAM_DEFINE_CONST(uint8(6));		% Lock actuators (set actuator outputs to disarmed values)

%% 外部模式丢失动作
OFFBOARD_LOSS_ACTIONS_DISABLED = PARAM_DEFINE_CONST(int8(-1));
OFFBOARD_LOSS_ACTIONS_AUTO_LAND = PARAM_DEFINE_CONST(int8(0));
OFFBOARD_LOSS_ACTIONS_AUTO_LOITER = PARAM_DEFINE_CONST(int8(1));
OFFBOARD_LOSS_ACTIONS_AUTO_RTL = PARAM_DEFINE_CONST(int8(2));
OFFBOARD_LOSS_ACTIONS_TERMINATE = PARAM_DEFINE_CONST(int8(3));
OFFBOARD_LOSS_ACTIONS_LOCKDOWN = PARAM_DEFINE_CONST(int8(4));

%% 外部模式遥控器丢失动作
OFFBOARD_LOSS_RC_ACTIONS_DISABLED = PARAM_DEFINE_CONST(int8(-1));
OFFBOARD_LOSS_RC_ACTIONS_MANUAL_POSITION = PARAM_DEFINE_CONST(int8(0));
OFFBOARD_LOSS_RC_ACTIONS_MANUAL_ALTITUDE = PARAM_DEFINE_CONST(int8(1));
OFFBOARD_LOSS_RC_ACTIONS_MANUAL_ATTITUDE = PARAM_DEFINE_CONST(int8(2));
OFFBOARD_LOSS_RC_ACTIONS_AUTO_RTL = PARAM_DEFINE_CONST(int8(3));
OFFBOARD_LOSS_RC_ACTIONS_AUTO_LAND = PARAM_DEFINE_CONST(int8(4));
OFFBOARD_LOSS_RC_ACTIONS_AUTO_LOITER = PARAM_DEFINE_CONST(int8(5));
OFFBOARD_LOSS_RC_ACTIONS_TERMINATE = PARAM_DEFINE_CONST(int8(6));
OFFBOARD_LOSS_RC_ACTIONS_LOCKDOWN = PARAM_DEFINE_CONST(int8(7));

%% 位置信息丢失动作
POS_NAV_LOSS_ACTIONS_ALTITUDE_MANUAL = PARAM_DEFINE_CONST(int8(0));
POS_NAV_LOSS_ACTIONS_LAND_TERMINATE = PARAM_DEFINE_CONST(int8(1));

%% 低电压故障动作
LOW_BAT_ACTIONS_WARNING = PARAM_DEFINE_CONST(int8(0));
LOW_BAT_ACTIONS_RETURN = PARAM_DEFINE_CONST(int8(1));
LOW_BAT_ACTIONS_LAND = PARAM_DEFINE_CONST(int8(2));
LOW_BAT_ACTIONS_RETURN_OR_LAND = PARAM_DEFINE_CONST(int8(3));


%%
RCL_EXCEPT_MISSION  = PARAM_DEFINE_CONST(uint8(1));
RCL_EXCEPT_HOLD     = PARAM_DEFINE_CONST(uint8(2));
RCL_EXCEPT_OFFBOARD = PARAM_DEFINE_CONST(uint8(3));

%%
COMMANDER_MONITORING_INTERVAL  = PARAM_DEFINE_CONST(uint64(10000));
HOTPLUG_SENS_TIMEOUT           = PARAM_DEFINE_CONST(uint64(8000000));
INAIR_RESTART_HOLDOFF_INTERVAL = PARAM_DEFINE_CONST(uint64(500000));
POSVEL_PROBATION_MAX           = PARAM_DEFINE_CONST(uint64(100000000));
POSVEL_PROBATION_MIN           = PARAM_DEFINE_CONST(uint64(1000000));

save commander_data.mat -regexp ^(?!nosave_).+